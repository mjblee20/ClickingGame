{"version":3,"sources":["components/Images/index.js","components/Squares/index.js","components/Row/index.js","components/Col/index.js","components/Button/index.js","components/PlayField/index.js","components/Container/index.js","App.js","index.js"],"names":["Images","props","react_default","a","createElement","className","src","process","url","alt","info","Squares","state","clicked","_this2","this","value","id","onClick","handleClick","components_Images","Component","Row","Object","assign","concat","fluid","Col","size","split","map","join","Button","PlayField","score","win","loss","randomArr","Data","reset","_this","setState","randomize","array","console","log","newArr","i","length","j","Math","floor","random","_ref","indexOf","increment","defeat","victory","components_Row","components_Col","element","components_Squares","key","Container","App","components_Container","components_PlayField","ReactDOM","render","src_App","document","getElementById"],"mappings":"2nCAceA,MAXf,SAAiBC,GACb,OAEIC,EAAAC,EAAAC,cAAA,OACIC,UAAY,SACZC,IAAOC,gBAAyBN,EAAMO,IACtCC,IAAOF,gBAAyBN,EAAMS,QCYnCC,oNAfXC,MAAQ,CACJC,SAAS,2EAGJ,IAAAC,EAAAC,KACL,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUW,MAAOD,KAAKd,MAAMgB,GAC3CC,QAAS,kBAAMJ,EAAKb,MAAMkB,YAAYL,EAAKb,MAAMgB,MAC7Cf,EAAAC,EAAAC,cAAA,UAAKW,KAAKd,MAAMgB,IAChBf,EAAAC,EAAAC,cAACgB,EAAD,CAAQZ,IAAKO,KAAKd,MAAMK,IAAKI,KAAMK,KAAKd,MAAMQ,cAVxCY,cCCPC,MAJf,SAAarB,GACX,OAAOC,EAAAC,EAAAC,cAAA,MAAAmB,OAAAC,OAAA,CAAKnB,UAAS,MAAAoB,OAAQxB,EAAMyB,MAAQ,SAAW,KAAUzB,KCKnD0B,MANf,SAAa1B,GACX,IAAM2B,EAAO3B,EAAM2B,KAAKC,MAAM,KAAKC,IAAI,SAAAF,GAAI,MAAI,OAASA,IAAMG,KAAK,KAEnE,OAAO7B,EAAAC,EAAAC,cAAA,MAAAmB,OAAAC,OAAA,CAAKnB,UAAWuB,GAAU3B,kBCMpB+B,ICoHAC,6MArHXrB,MAAQ,CACJsB,MAAO,EACPC,IAAK,EACLC,KAAM,EACNC,UAAWC,EACXzB,QAAS,MAIb0B,MAAQ,WACJC,EAAKC,SAAS,CACVP,MAAO,EACPG,UAAWC,EACXzB,QAAS,KAEb2B,EAAKE,UAAUJ,MASnBI,UAAY,SAAAC,GACRC,QAAQC,IAAI,yBAEZ,IADA,IAAIC,EAASH,EACJI,EAAID,EAAOE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACxC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADFM,EAEf,CAACP,EAAOG,GAAIH,EAAOC,IAA3CD,EAAOC,GAFgCM,EAAA,GAE5BP,EAAOG,GAFqBI,EAAA,GAI5Cb,EAAKC,SAAS,CACVJ,UAAWS,OAMnB3B,YAAc,SAAAF,GACV2B,QAAQC,IAAI,YAE4B,IAApCL,EAAK5B,MAAMC,QAAQyC,QAAQrC,IAC3BuB,EAAKe,YACLf,EAAKC,SAAS,CACV5B,QAAS2B,EAAK5B,MAAMC,QAAQY,OAAOR,MAGvCuB,EAAKgB,SAEPZ,QAAQC,IAAIL,EAAK5B,MAAMC,SACzB+B,QAAQC,IAAI,0BAIhBY,QAAU,WACNb,QAAQC,IAAI,OACZL,EAAKC,SAAS,CACVN,IAAKK,EAAK5B,MAAMuB,IAAM,EACtBD,MAAO,IAEXM,EAAKD,WAITiB,OAAS,WACLZ,QAAQC,IAAI,QACZL,EAAKC,SAAS,CACVL,KAAMI,EAAK5B,MAAMwB,KAAO,EACxBF,MAAO,IAEXM,EAAKD,WAGTgB,UAAY,WACRX,QAAQC,IAAI,aAEZL,EAAKC,SAAS,CACVP,MAAOM,EAAK5B,MAAMsB,MAAQ,IAGL,KAArBM,EAAK5B,MAAMsB,OACXM,EAAKiB,UAETjB,EAAKE,UAAUJ,uFAhEfvB,KAAK2B,UAAUJ,oCAoEV,IAAAxB,EAAAC,KACL,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,4BAAoBW,KAAKH,MAAMsB,MAA/B,UAA6CnB,KAAKH,MAAMuB,IAAxD,YAAsEpB,KAAKH,MAAMwB,OAGrFlC,EAAAC,EAAAC,cAACsD,EAAD,KACIxD,EAAAC,EAAAC,cAACuD,EAAD,CAAKtD,UAAU,0CAA0CuB,KAAK,KAGtDb,KAAKH,MAAMyB,UAAUP,IAAI,SAAC8B,EAASb,GAC/B,OACI7C,EAAAC,EAAAC,cAACyD,EAAD,CACIC,IAAOf,EACP5B,YAAaL,EAAKK,YAClBF,GAAM2C,EAAQ3C,GACdX,IAAOsD,EAAQtD,IACfG,IAAOmD,EAAQnD,kBA3G/BY,aCFT0C,MAJf,SAAmB9D,GACjB,OAAOC,EAAAC,EAAAC,cAAA,MAAAmB,OAAAC,OAAA,CAAKnB,UAAS,YAAAoB,OAAcxB,EAAMyB,MAAQ,SAAW,KAAUzB,WCUzD+D,MARf,WACE,OACE9D,EAAAC,EAAAC,cAAC6D,EAAD,KACE/D,EAAAC,EAAAC,cAAC8D,EAAD,QCFNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.ccac868a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Images (props) {\n    return (\n        // Need to get links to work\n        <img \n            className = \"images\"\n            src = {process.env.PUBLIC_URL + props.url}\n            alt = {process.env.PUBLIC_URL + props.info}\n        />\n    );\n}\n\nexport default Images;\n\n","import React, { Component } from \"react\";\nimport Images from \"../Images\";\nimport \"./style.css\";\n\n\nclass Squares extends Component{\n    state = {\n        clicked: false\n    }\n\n    render() {\n        return (\n            <div className=\"squares\" value={this.props.id} \n            onClick={() => this.props.handleClick(this.props.id)}>\n                <h6>{this.props.id}</h6>\n                <Images url={this.props.src} info={this.props.alt}/>\n            </div>\n        );\n    }\n}\n\nexport default Squares;\n\n\n","import React from \"react\";\n\nfunction Row(props) {\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Row;\n","import React from \"react\";\n\nfunction Col(props) {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n\n  return <div className={size} {...props} />;\n}\n\nexport default Col;\n","import React from \"react\";\n\n// Destructuring the type, className, children and onClick props, applying them to the button element\nfunction Button({ type = \"default\", className, children, onClick }) {\n  return (\n    <button onClick={onClick} className={[\"btn btn-lg\", `btn-${type}`, className].join(\" \")}>\n      {children}\n    </button>\n  );\n}\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport Squares from \"../Squares\";\nimport Row from '../Row';\nimport Col from '../Col';\nimport Data from \"../../data.json\";\nimport Button from \"../Button\";\nimport \"./style.css\";\n\nclass PlayField extends Component {\n\n    state = {\n        score: 0,\n        win: 0,\n        loss: 0,\n        randomArr: Data,\n        clicked: []\n    }\n\n    // resets the game\n    reset = () => {\n        this.setState({\n            score: 0,\n            randomArr: Data,\n            clicked: []\n        });\n        this.randomize(Data);\n    }\n\n    componentDidMount() {\n        this.randomize(Data);\n    }\n\n    // shuffles the order of the data array from data.json\n    // this function is only called when game is restarted\n    randomize = array => {\n        console.log(\"shuffles image orders\");\n        let newArr = array;\n        for (let i = newArr.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n        }\n        this.setState({\n            randomArr: newArr\n        })\n    }\n\n    // once the user clicks an image div. Check if they have guessed correctly\n    // correct guesses won't have their id in the clicked array\n    handleClick = id => {\n        console.log(\"clicked\")\n        \n        if (this.state.clicked.indexOf(id) === -1) {\n            this.increment();\n            this.setState({ \n                clicked: this.state.clicked.concat(id) \n            });\n        } else {\n            this.defeat();\n        }\n          console.log(this.state.clicked);\n        console.log(\"handleclick squares\");\n    }\n\n    // increment win if all guessed correctly\n    victory = () => {\n        console.log(\"win\");\n        this.setState({\n            win: this.state.win + 1,\n            score: 0\n        })\n        this.reset();\n    }\n\n    // increment loss if guess incorrectly\n    defeat = () => {\n        console.log(\"loss\");\n        this.setState({\n            loss: this.state.loss + 1,\n            score: 0\n        })\n        this.reset();\n    }\n\n    increment = () => {\n        console.log(\"increment\");\n        // if all have been guessed correctly\n        this.setState({\n            score: this.state.score + 1\n        })\n        // if all images have been clicked no more than once player wins\n        if (this.state.score === 11) {\n            this.victory();\n        }\n        this.randomize(Data);\n    }\n\n\n    render() {\n        return (\n            <div className=\"playfield\">\n                <div>\n                    <h3>Current Score: {this.state.score} Wins: {this.state.win} Losses: {this.state.loss}</h3>\n                </div>\n                \n                <Row>\n                    <Col className=\"d-flex justify-content-around flex-wrap\" size=\"6\">\n                        {\n                            /* Iterate through the randomized data.json array and rendering image divs */\n                            this.state.randomArr.map((element, i) => {\n                                return (\n                                    <Squares \n                                        key = {i}\n                                        handleClick={this.handleClick}\n                                        id = {element.id} \n                                        src = {element.src} \n                                        alt = {element.alt}\n                                    />\n                                );\n                            })\n                        }\n                    </Col>\n                </Row>\n            </div>  \n        );\n    }\n}\n\nexport default PlayField;","import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;\n","import React from 'react';\nimport PlayField from './components/PlayField';\nimport Container from './components/Container';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Container>\n      <PlayField />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}