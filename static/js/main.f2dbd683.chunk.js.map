{"version":3,"sources":["components/Images/index.js","components/Squares/index.js","components/PlayField/index.js","App.js","index.js"],"names":["Images","props","react_default","a","createElement","src","url","alt","info","Squares","state","clicked","isClicked","event","_event$target","target","name","value","_this","setState","Object","defineProperty","check","className","components_Images","Component","PlayField","score","win","loss","randomize","victory","defeat","incrementScore","checkGuess","correct","statedefeat","_this2","this","components_Squares","onclick","App","components_PlayField","ReactDOM","render","src_App","document","getElementById"],"mappings":"kUAYeA,MATf,SAAiBC,GACb,OACIC,EAAAC,EAAAC,cAAA,OACIC,IAAOJ,EAAMK,IACbC,IAAON,EAAMO,QC2BVC,oNA5BXC,MAAQ,CACJC,SAAS,KAGbC,UAAY,SAAAC,GAAS,IAAAC,EAEOD,EAAME,OAAtBC,EAFSF,EAETE,KAAMC,EAFGH,EAEHG,MAGdC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKJ,EAAOC,OAIhBK,MAAQ,SAAAT,6EAKJ,OACIX,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,WACXrB,EAAAC,EAAAC,cAACoB,EAAD,CAAQlB,IAAI,GAAGE,KAAK,aAtBdiB,cCgEPC,oNA9DXhB,MAAQ,CACJiB,MAAO,EACPC,IAAK,EACLC,KAAM,KAIVC,UAAY,eAKZC,QAAU,WACNb,EAAKC,SAAS,CACVS,IAAKV,EAAKR,MAAMkB,IAAM,EACtBD,MAAO,OAKfK,OAAS,WACLd,EAAKC,SAAS,CACVU,KAAMX,EAAKR,MAAMmB,KAAO,EACxBF,MAAO,OAIfM,eAAiB,WAGTf,EAAKa,UAETb,EAAKC,SAAS,CACVQ,MAAOT,EAAKR,MAAMiB,MAAQ,OAMlCO,WAAa,SAAAC,GACTA,EAAUjB,EAAKe,iBAAmBf,EAAKkB,uFAGlC,IAAAC,EAAAC,KACL,OACIpC,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,aAMXrB,EAAAC,EAAAC,cAACmC,EAAD,CAASC,QAAS,kBAAMH,EAAKH,cAC7BhC,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACmC,EAAD,cA1DQd,oBCKTgB,MANf,WACE,OACEvC,EAAAC,EAAAC,cAACsC,EAAD,OCAJC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.f2dbd683.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Images (props) {\n    return (\n        <img \n            src = {props.url}\n            alt = {props.info}\n        />\n    );\n}\n\nexport default Images;\n\n","import React, { Component } from \"react\";\nimport Images from \"../Images\";\nimport \"./style.css\";\n\n\nclass Squares extends Component{\n    state = {\n        clicked: false\n    }\n\n    isClicked = event => {\n        // Pull the name and value properties off of the event.target (the element which triggered the event)\n        const { name, value } = event.target;\n\n        // Set the state for the appropriate input field\n        this.setState({\n            [name]: value\n        });\n    }\n\n    check = event => {\n        \n    }\n\n    render() {\n        return (\n            <div className=\"squares\">\n                <Images url=\"\" info=\"\"/>\n            </div>\n        );\n    }\n    \n}\n\nexport default Squares;","import React, { Component } from \"react\";\nimport Squares from \"../Squares\";\n// import Data from \"../../data.json\";\nimport \"./style.css\";\n\nclass PlayField extends Component {\n\n    state = {\n        score: 0,\n        win: 0,\n        loss: 0\n    }\n\n    // shuffles the order of the data array from data.json\n    randomize = () => {\n\n    }\n\n    // increment win if all guessed correctly\n    victory = () => {\n        this.setState({\n            win: this.state.win + 1,\n            score: 0\n        })\n    }\n\n    // increment loss if guess incorrectly\n    defeat = () => {\n        this.setState({\n            loss: this.state.loss + 1,\n            score: 0\n        })\n    }\n\n    incrementScore = () => {\n        // if all have been guessed correctly\n        if (true) {\n            this.victory();\n        }\n        this.setState({\n            score: this.state.score + 1\n        })\n    }\n\n    // once the user clicks an image div. Check if they have guessed correctly\n    // correct is when clicked state is false on the image that was clicked.\n    checkGuess = correct => {\n        correct ? this.incrementScore() : this.statedefeat()\n    }\n\n    render() {\n        return (\n            <div className=\"playfield\">\n            {\n                /* Iterate through the randomized data.json array and rendering image divs */\n                \n                // Data.map()\n            }\n                <Squares onclick={() => this.checkGuess}/>\n                <Squares />\n                <Squares />\n                <Squares />\n                <Squares />\n                <Squares />\n            </div>  \n        );\n    }\n}\n\nexport default PlayField;","import React from 'react';\nimport PlayField from './components/PlayField'\nimport './App.css';\n\nfunction App() {\n  return (\n    <PlayField />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}