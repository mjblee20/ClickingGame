{"version":3,"sources":["components/Images/index.js","components/Squares/index.js","components/Row/index.js","components/Col/index.js","components/Button/index.js","components/PlayField/index.js","components/Container/index.js","App.js","index.js"],"names":["Images","props","react_default","a","createElement","className","src","url","alt","info","Squares","state","clicked","handleClick","console","log","_this","setState","onClick","this","components_Images","Component","Row","Object","assign","concat","fluid","Col","size","split","map","join","Button","_ref","_ref$type","type","children","PlayField","score","win","loss","randomArr","Data","reset","randomize","array","newArr","i","length","j","Math","floor","random","victory","defeat","increment","checkGuess","correct","_this2","components_Row","components_Col","element","components_Squares","key","new","components_Button","Container","App","components_Container","components_PlayField","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d673500f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Images (props) {\n    return (\n        <img \n            className = \"images\"\n            src = {props.url}\n            alt = {props.info}\n        />\n    );\n}\n\nexport default Images;\n\n","import React, { Component } from \"react\";\nimport Images from \"../Images\";\nimport \"./style.css\";\n\n\nclass Squares extends Component{\n    state = {\n        clicked: false\n    }\n\n    handleClick = () => {\n        {   \n            console.log(\"handleclick squares\");\n            let clicked = this.state.clicked ? false : true;\n            this.setState({\n                clicked: true\n            });\n            this.props.onClick(clicked);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"squares\" onClick={this.handleClick}>\n                <h6>{this.props.url}</h6>\n                <Images url={this.props.src} info={this.props.alt}/>\n            </div>\n        );\n    }\n}\n\nexport default Squares;\n\n\n","import React from \"react\";\n\nfunction Row(props) {\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Row;\n","import React from \"react\";\n\nfunction Col(props) {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n\n  return <div className={size} {...props} />;\n}\n\nexport default Col;\n","import React from \"react\";\n\n// Destructuring the type, className, children and onClick props, applying them to the button element\nfunction Button({ type = \"default\", className, children, onClick }) {\n  return (\n    <button onClick={onClick} className={[\"btn btn-lg\", `btn-${type}`, className].join(\" \")}>\n      {children}\n    </button>\n  );\n}\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport Squares from \"../Squares\";\nimport Row from '../Row';\nimport Col from '../Col';\nimport Data from \"../../data.json\";\nimport Button from \"../Button\";\nimport \"./style.css\";\n\nclass PlayField extends Component {\n\n    state = {\n        score: 0,\n        win: 0,\n        loss: 0,\n        // new: false,\n        randomArr: Data\n    }\n\n    // resets the game\n    reset = () => {\n        this.setState({\n            // new: false\n        })\n        this.randomize();\n    }\n\n    componentDidMount() {\n        this.randomize(Data);\n    }\n\n    // shuffles the order of the data array from data.json\n    // this function is only called when game is restarted\n    randomize = array => {\n        let newArr = array;\n        for (let i = newArr.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n        }\n        console.log(\"shuffles image orders\");\n        this.setState({\n            randomArr: newArr\n        })\n    }\n\n    // increment win if all guessed correctly\n    victory = () => {\n        console.log(\"win\");\n        this.setState({\n            // new: true,\n            win: this.state.win + 1,\n            score: 0\n        })\n        this.randomize(Data);\n    }\n\n    // increment loss if guess incorrectly\n    defeat = () => {\n        console.log(\"loss\");\n        this.setState({\n            // new: true,\n            loss: this.state.loss + 1,\n            score: 0\n        })\n        this.randomize(Data);\n    }\n\n    increment = () => {\n        // if all have been guessed correctly\n        \n        console.log(this.state.score);\n        if (this.state.score === 11) {\n            this.victory();\n        }\n        this.randomize(Data);\n    }\n\n    // once the user clicks an image div. Check if they have guessed correctly\n    // correct is when clicked state is false on the image that was clicked.\n    checkGuess = correct => {\n        if (correct) {\n            this.setState({\n                score: this.state.score + 1\n            })\n            this.increment()\n        } else {\n            this.defeat()\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"playfield\">\n                <div>\n                    <h3>Current Score: {this.state.score} Wins: {this.state.win} Losses: {this.state.loss}</h3>\n                </div>\n                \n                <Row>\n                    <Col className=\"d-flex justify-content-around flex-wrap\" size=\"6\">\n                        {\n                            /* Iterate through the randomized data.json array and rendering image divs */\n                            this.state.randomArr.map((element, i) => {\n                                return (\n                                    <Squares \n                                        key = {i}\n                                        onClick={this.checkGuess} \n                                        url = {element.url} \n                                        src = {element.src} \n                                        alt = {element.alt}\n                                        new = {this.state.new}\n                                    />\n                                );\n                            })\n                        }\n                    </Col>\n                </Row>\n                <Row>\n                    <Button onClick={this.randomize}>Click me to restart!</Button>\n                </Row>\n            </div>  \n        );\n    }\n}\n\nexport default PlayField;","import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;\n","import React from 'react';\nimport PlayField from './components/PlayField';\nimport Container from './components/Container';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Container>\n      <PlayField />\n    </Container>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}